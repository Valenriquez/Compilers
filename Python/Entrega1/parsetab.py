
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'left><NEleft+-left*/CTE_FLOAT CTE_INT CTE_STRING DO ELSE END FLOAT ID IF INT MAIN NE PRINT PROGRAM VAR VOID WHILEprogram : PROGRAM ID ";" vars funcs MAIN body ENDvars : VAR id_list ":" type ";" vars\n             | emptyid_list : ID id_list_tailid_list_tail : "," ID id_list_tail\n                    | emptytype : INT\n             | FLOATfuncs : func funcs\n             | emptyfunc : VOID ID "(" params ")" "[" vars body "]" ";"params : ID ":" type params_tail\n              | emptyparams_tail : "," ID ":" type params_tail\n                   | emptybody : "{" stmt_list "}"stmt_list : statement stmt_list\n                  | emptystatement : assign\n                 | condition\n                 | cycle\n                 | f_call\n                 | print_stmtassign : ID "=" expression ";"print_stmt : PRINT "(" print_list ")" ";"print_list : print_item print_list_tailprint_item : expression\n                  | CTE_STRINGprint_list_tail : "," print_item print_list_tail\n                       | emptycycle : WHILE "(" expression ")" DO body ";"condition : IF "(" expression ")" body else_part ";"else_part : ELSE body\n                 | emptyf_call : ID "(" expr_list ")" ";"expr_list : expression expr_list_tail\n                 | emptyexpr_list_tail : "," expression expr_list_tail\n                      | emptyexpression : simple_expression\n                  | simple_expression \'>\' simple_expression\n                  | simple_expression \'<\' simple_expression\n                  | simple_expression NE simple_expressionsimple_expression : simple_expression \'+\' term\n                         | simple_expression \'-\' term\n                         | termterm : term \'*\' factor\n            | term \'/\' factor\n            | factorfactor : \'(\' expression \')\'\n              | \'-\' factor\n              | \'+\' factor\n              | ID\n              | CTE_INT\n              | CTE_FLOATempty :'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,28,],[0,-1,]),'ID':([2,6,11,19,22,23,30,32,33,34,35,36,48,49,50,51,52,59,61,63,77,78,79,80,81,82,84,85,90,96,99,110,114,126,128,],[3,13,16,27,37,41,37,-19,-20,-21,-22,-23,56,56,56,56,56,56,56,56,-24,56,56,56,56,56,56,56,56,56,116,-35,-25,-32,-31,]),';':([3,24,25,26,46,56,57,58,60,62,64,65,83,86,88,94,102,103,104,105,106,107,108,109,112,119,121,122,125,127,],[4,44,-7,-8,-16,-53,77,-40,-46,-49,-54,-55,-52,-51,110,114,-41,-42,-43,-44,-45,-47,-48,-50,-56,126,-34,128,130,-33,]),'VAR':([4,44,76,],[6,6,6,]),'VOID':([4,5,7,9,44,55,130,],[-56,11,-3,11,-56,-2,-11,]),'MAIN':([4,5,7,8,9,10,15,44,55,130,],[-56,-56,-3,14,-56,-10,-9,-56,-2,-11,]),'{':([7,14,44,55,76,92,101,113,120,],[-3,22,-56,-2,-56,22,22,22,22,]),':':([12,13,18,20,27,41,45,116,],[17,-56,-4,-6,-56,53,-5,124,]),',':([13,25,26,27,56,58,60,62,64,65,67,72,73,74,75,83,86,102,103,104,105,106,107,108,109,111,115,129,],[19,-7,-8,19,-53,-40,-46,-49,-54,-55,90,96,-27,-28,99,-52,-51,-41,-42,-43,-44,-45,-47,-48,-50,90,96,99,]),'(':([16,37,38,39,40,48,49,50,51,52,59,61,63,78,79,80,81,82,84,85,90,96,],[23,49,50,51,52,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'INT':([17,53,124,],[25,25,25,]),'FLOAT':([17,53,124,],[26,26,26,]),'END':([21,46,],[28,-16,]),'}':([22,29,30,31,32,33,34,35,36,47,77,110,114,126,128,],[-56,46,-56,-18,-19,-20,-21,-22,-23,-17,-24,-35,-25,-32,-31,]),'IF':([22,30,32,33,34,35,36,77,110,114,126,128,],[38,38,-19,-20,-21,-22,-23,-24,-35,-25,-32,-31,]),'WHILE':([22,30,32,33,34,35,36,77,110,114,126,128,],[39,39,-19,-20,-21,-22,-23,-24,-35,-25,-32,-31,]),'PRINT':([22,30,32,33,34,35,36,77,110,114,126,128,],[40,40,-19,-20,-21,-22,-23,-24,-35,-25,-32,-31,]),')':([23,25,26,42,43,49,56,58,60,62,64,65,66,67,68,69,70,71,72,73,74,75,83,86,87,89,91,95,97,98,100,102,103,104,105,106,107,108,109,111,115,118,123,129,131,],[-56,-7,-8,54,-13,-56,-53,-40,-46,-49,-54,-55,88,-56,-37,92,93,94,-56,-27,-28,-56,-52,-51,109,-36,-39,-26,-30,-12,-15,-41,-42,-43,-44,-45,-47,-48,-50,-56,-56,-38,-29,-56,-14,]),'=':([37,],[48,]),'ELSE':([46,112,],[-16,120,]),']':([46,117,],[-16,125,]),'-':([48,49,50,51,52,56,58,59,60,61,62,63,64,65,78,79,80,81,82,83,84,85,86,90,96,102,103,104,105,106,107,108,109,],[61,61,61,61,61,-53,82,61,-46,61,-49,61,-54,-55,61,61,61,61,61,-52,61,61,-51,61,61,82,82,82,-44,-45,-47,-48,-50,]),'+':([48,49,50,51,52,56,58,59,60,61,62,63,64,65,78,79,80,81,82,83,84,85,86,90,96,102,103,104,105,106,107,108,109,],[59,59,59,59,59,-53,81,59,-46,59,-49,59,-54,-55,59,59,59,59,59,-52,59,59,-51,59,59,81,81,81,-44,-45,-47,-48,-50,]),'CTE_INT':([48,49,50,51,52,59,61,63,78,79,80,81,82,84,85,90,96,],[64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'CTE_FLOAT':([48,49,50,51,52,59,61,63,78,79,80,81,82,84,85,90,96,],[65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'CTE_STRING':([52,96,],[74,74,]),'[':([54,],[76,]),'*':([56,60,62,64,65,83,86,105,106,107,108,109,],[-53,84,-49,-54,-55,-52,-51,84,84,-47,-48,-50,]),'/':([56,60,62,64,65,83,86,105,106,107,108,109,],[-53,85,-49,-54,-55,-52,-51,85,85,-47,-48,-50,]),'>':([56,58,60,62,64,65,83,86,105,106,107,108,109,],[-53,78,-46,-49,-54,-55,-52,-51,-44,-45,-47,-48,-50,]),'<':([56,58,60,62,64,65,83,86,105,106,107,108,109,],[-53,79,-46,-49,-54,-55,-52,-51,-44,-45,-47,-48,-50,]),'NE':([56,58,60,62,64,65,83,86,105,106,107,108,109,],[-53,80,-46,-49,-54,-55,-52,-51,-44,-45,-47,-48,-50,]),'DO':([93,],[113,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'vars':([4,44,76,],[5,55,101,]),'empty':([4,5,9,13,22,23,27,30,44,49,67,72,75,76,111,112,115,129,],[7,10,10,20,31,43,20,31,7,68,91,97,100,7,91,121,97,100,]),'funcs':([5,9,],[8,15,]),'func':([5,9,],[9,9,]),'id_list':([6,],[12,]),'id_list_tail':([13,27,],[18,45,]),'body':([14,92,101,113,120,],[21,112,117,122,127,]),'type':([17,53,124,],[24,75,129,]),'stmt_list':([22,30,],[29,47,]),'statement':([22,30,],[30,30,]),'assign':([22,30,],[32,32,]),'condition':([22,30,],[33,33,]),'cycle':([22,30,],[34,34,]),'f_call':([22,30,],[35,35,]),'print_stmt':([22,30,],[36,36,]),'params':([23,],[42,]),'expression':([48,49,50,51,52,63,90,96,],[57,67,69,70,73,87,111,73,]),'simple_expression':([48,49,50,51,52,63,78,79,80,90,96,],[58,58,58,58,58,58,102,103,104,58,58,]),'term':([48,49,50,51,52,63,78,79,80,81,82,90,96,],[60,60,60,60,60,60,60,60,60,105,106,60,60,]),'factor':([48,49,50,51,52,59,61,63,78,79,80,81,82,84,85,90,96,],[62,62,62,62,62,83,86,62,62,62,62,62,62,107,108,62,62,]),'expr_list':([49,],[66,]),'print_list':([52,],[71,]),'print_item':([52,96,],[72,115,]),'expr_list_tail':([67,111,],[89,118,]),'print_list_tail':([72,115,],[95,123,]),'params_tail':([75,129,],[98,131,]),'else_part':([112,],[119,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID ; vars funcs MAIN body END','program',8,'p_program','scanner.py',85),
  ('vars -> VAR id_list : type ; vars','vars',6,'p_vars','scanner.py',90),
  ('vars -> empty','vars',1,'p_vars','scanner.py',91),
  ('id_list -> ID id_list_tail','id_list',2,'p_id_list','scanner.py',99),
  ('id_list_tail -> , ID id_list_tail','id_list_tail',3,'p_id_list_tail','scanner.py',103),
  ('id_list_tail -> empty','id_list_tail',1,'p_id_list_tail','scanner.py',104),
  ('type -> INT','type',1,'p_type','scanner.py',113),
  ('type -> FLOAT','type',1,'p_type','scanner.py',114),
  ('funcs -> func funcs','funcs',2,'p_funcs','scanner.py',119),
  ('funcs -> empty','funcs',1,'p_funcs','scanner.py',120),
  ('func -> VOID ID ( params ) [ vars body ] ;','func',10,'p_func','scanner.py',128),
  ('params -> ID : type params_tail','params',4,'p_params','scanner.py',133),
  ('params -> empty','params',1,'p_params','scanner.py',134),
  ('params_tail -> , ID : type params_tail','params_tail',5,'p_params_tail','scanner.py',141),
  ('params_tail -> empty','params_tail',1,'p_params_tail','scanner.py',142),
  ('body -> { stmt_list }','body',3,'p_body','scanner.py',151),
  ('stmt_list -> statement stmt_list','stmt_list',2,'p_stmt_list','scanner.py',156),
  ('stmt_list -> empty','stmt_list',1,'p_stmt_list','scanner.py',157),
  ('statement -> assign','statement',1,'p_statement','scanner.py',165),
  ('statement -> condition','statement',1,'p_statement','scanner.py',166),
  ('statement -> cycle','statement',1,'p_statement','scanner.py',167),
  ('statement -> f_call','statement',1,'p_statement','scanner.py',168),
  ('statement -> print_stmt','statement',1,'p_statement','scanner.py',169),
  ('assign -> ID = expression ;','assign',4,'p_assign','scanner.py',175),
  ('print_stmt -> PRINT ( print_list ) ;','print_stmt',5,'p_print_stmt','scanner.py',181),
  ('print_list -> print_item print_list_tail','print_list',2,'p_print_list','scanner.py',185),
  ('print_item -> expression','print_item',1,'p_print_item','scanner.py',189),
  ('print_item -> CTE_STRING','print_item',1,'p_print_item','scanner.py',190),
  ('print_list_tail -> , print_item print_list_tail','print_list_tail',3,'p_print_list_tail','scanner.py',194),
  ('print_list_tail -> empty','print_list_tail',1,'p_print_list_tail','scanner.py',195),
  ('cycle -> WHILE ( expression ) DO body ;','cycle',7,'p_cycle','scanner.py',204),
  ('condition -> IF ( expression ) body else_part ;','condition',7,'p_condition','scanner.py',210),
  ('else_part -> ELSE body','else_part',2,'p_else_part','scanner.py',214),
  ('else_part -> empty','else_part',1,'p_else_part','scanner.py',215),
  ('f_call -> ID ( expr_list ) ;','f_call',5,'p_f_call','scanner.py',224),
  ('expr_list -> expression expr_list_tail','expr_list',2,'p_expr_list','scanner.py',228),
  ('expr_list -> empty','expr_list',1,'p_expr_list','scanner.py',229),
  ('expr_list_tail -> , expression expr_list_tail','expr_list_tail',3,'p_expr_list_tail','scanner.py',236),
  ('expr_list_tail -> empty','expr_list_tail',1,'p_expr_list_tail','scanner.py',237),
  ('expression -> simple_expression','expression',1,'p_expression','scanner.py',246),
  ('expression -> simple_expression > simple_expression','expression',3,'p_expression','scanner.py',247),
  ('expression -> simple_expression < simple_expression','expression',3,'p_expression','scanner.py',248),
  ('expression -> simple_expression NE simple_expression','expression',3,'p_expression','scanner.py',249),
  ('simple_expression -> simple_expression + term','simple_expression',3,'p_simple_expression','scanner.py',258),
  ('simple_expression -> simple_expression - term','simple_expression',3,'p_simple_expression','scanner.py',259),
  ('simple_expression -> term','simple_expression',1,'p_simple_expression','scanner.py',260),
  ('term -> term * factor','term',3,'p_term','scanner.py',269),
  ('term -> term / factor','term',3,'p_term','scanner.py',270),
  ('term -> factor','term',1,'p_term','scanner.py',271),
  ('factor -> ( expression )','factor',3,'p_factor','scanner.py',280),
  ('factor -> - factor','factor',2,'p_factor','scanner.py',281),
  ('factor -> + factor','factor',2,'p_factor','scanner.py',282),
  ('factor -> ID','factor',1,'p_factor','scanner.py',283),
  ('factor -> CTE_INT','factor',1,'p_factor','scanner.py',284),
  ('factor -> CTE_FLOAT','factor',1,'p_factor','scanner.py',285),
  ('empty -> <empty>','empty',0,'p_empty','scanner.py',295),
]
