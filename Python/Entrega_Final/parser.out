Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMICOLON a_vars a_funcs MAIN_COURSE body ENDING
Rule 2     a_vars -> empty
Rule 3     a_vars -> vars
Rule 4     vars -> MY_VARS ID COLON type SEMICOLON list_vars
Rule 5     list_vars -> empty
Rule 6     list_vars -> ID COLON type SEMICOLON list_vars
Rule 7     type -> INT
Rule 8     type -> FLOAT
Rule 9     body -> LBRACE list_statements RBRACE
Rule 10    list_statements -> statement body_rep
Rule 11    list_statements -> empty
Rule 12    list_statements -> statement
Rule 13    body_rep -> statement body_rep
Rule 14    body_rep -> statement
Rule 15    statement -> assign
Rule 16    statement -> condition
Rule 17    statement -> do_cycle
Rule 18    statement -> cycle
Rule 19    statement -> f_call
Rule 20    statement -> print_statement
Rule 21    print_statement -> PRINT LPAREN list_expresion RPAREN SEMICOLON
Rule 22    assign -> ID add_operand EQUALS add_operador expresion SEMICOLON
Rule 23    add_operand -> <empty>
Rule 24    add_operador -> <empty>
Rule 25    list_expresion -> expresion addPrint
Rule 26    list_expresion -> expresion addPrint COMMA list_expresion
Rule 27    list_expresion -> CTE_STRING addPrintString
Rule 28    list_expresion -> CTE_STRING addPrintString COMMA list_expresion
Rule 29    addPrint -> <empty>
Rule 30    addPrintString -> <empty>
Rule 31    do_cycle -> DO cycle_start body WHILE LPAREN expresion RPAREN goto_true SEMICOLON
Rule 32    cycle -> WHILE cycle_start LPAREN expresion RPAREN generate_gotof body generate_goto finish_gotof SEMICOLON
Rule 33    generate_gotof -> <empty>
Rule 34    generate_goto -> <empty>
Rule 35    finish_gotof -> <empty>
Rule 36    cycle_start -> <empty>
Rule 37    goto_true -> <empty>
Rule 38    condition -> IF LPAREN expresion RPAREN goto_false body else_part SEMICOLON
Rule 39    goto_false -> <empty>
Rule 40    else_part -> ELSE goto body
Rule 41    else_part -> empty
Rule 42    goto -> <empty>
Rule 43    expresion -> exp comparar_exp exp
Rule 44    expresion -> exp
Rule 45    comparar_exp -> LT
Rule 46    comparar_exp -> GT
Rule 47    comparar_exp -> NE
Rule 48    exp -> termino add_termino
Rule 49    exp -> termino add_termino next_termino
Rule 50    add_termino -> <empty>
Rule 51    next_termino -> sum_rest exp
Rule 52    sum_rest -> PLUS
Rule 53    sum_rest -> MINUS
Rule 54    termino -> factor add_factor next_factor
Rule 55    termino -> factor add_factor
Rule 56    next_factor -> mult_div termino
Rule 57    mult_div -> TIMES
Rule 58    mult_div -> DIVIDE
Rule 59    factor -> LPAREN expresion RPAREN
Rule 60    factor -> id_cte
Rule 61    add_factor -> <empty>
Rule 62    id_cte -> ID push_var
Rule 63    id_cte -> cte push_const
Rule 64    push_const -> <empty>
Rule 65    push_var -> <empty>
Rule 66    cte -> CTE_INT
Rule 67    cte -> CTE_FLOAT
Rule 68    funcs -> VOID ID LPAREN list_params RPAREN LBRACE var_no_var body RBRACE SEMICOLON
Rule 69    a_funcs -> empty
Rule 70    a_funcs -> funcs b_funcs
Rule 71    b_funcs -> funcs b_funcs
Rule 72    b_funcs -> funcs
Rule 73    list_params -> empty
Rule 74    list_params -> ID COLON type more_params
Rule 75    more_params -> empty
Rule 76    more_params -> COMMA ID COLON type more_params
Rule 77    var_no_var -> empty
Rule 78    var_no_var -> vars
Rule 79    f_call -> ID LPAREN RPAREN SEMICOLON
Rule 80    empty -> <empty>

Terminals, with rules where they appear

COLON                : 4 6 74 76
COMMA                : 26 28 76
CTE_FLOAT            : 67
CTE_INT              : 66
CTE_STRING           : 27 28
DIVIDE               : 58
DO                   : 31
ELSE                 : 40
ENDING               : 1
EQUALS               : 22
FLOAT                : 8
GT                   : 46
ID                   : 1 4 6 22 62 68 74 76 79
IF                   : 38
INT                  : 7
LBRACE               : 9 68
LPAREN               : 21 31 32 38 59 68 79
LT                   : 45
MAIN_COURSE          : 1
MINUS                : 53
MY_VARS              : 4
NE                   : 47
PLUS                 : 52
PRINT                : 21
PROGRAM              : 1
RBRACE               : 9 68
RPAREN               : 21 31 32 38 59 68 79
SEMICOLON            : 1 4 6 21 22 31 32 38 68 79
TIMES                : 57
VOID                 : 68
WHILE                : 31 32
error                : 

Nonterminals, with rules where they appear

a_funcs              : 1
a_vars               : 1
addPrint             : 25 26
addPrintString       : 27 28
add_factor           : 54 55
add_operador         : 22
add_operand          : 22
add_termino          : 48 49
assign               : 15
b_funcs              : 70 71
body                 : 1 31 32 38 40 68
body_rep             : 10 13
comparar_exp         : 43
condition            : 16
cte                  : 63
cycle                : 18
cycle_start          : 31 32
do_cycle             : 17
else_part            : 38
empty                : 2 5 11 41 69 73 75 77
exp                  : 43 43 44 51
expresion            : 22 25 26 31 32 38 59
f_call               : 19
factor               : 54 55
finish_gotof         : 32
funcs                : 70 71 72
generate_goto        : 32
generate_gotof       : 32
goto                 : 40
goto_false           : 38
goto_true            : 31
id_cte               : 60
list_expresion       : 21 26 28
list_params          : 68
list_statements      : 9
list_vars            : 4 6
more_params          : 74 76
mult_div             : 56
next_factor          : 54
next_termino         : 49
print_statement      : 20
program              : 0
push_const           : 63
push_var             : 62
statement            : 10 12 13 14
sum_rest             : 51
termino              : 48 49 56
type                 : 4 6 74 76
var_no_var           : 68
vars                 : 3 78

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMICOLON a_vars a_funcs MAIN_COURSE body ENDING

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMICOLON a_vars a_funcs MAIN_COURSE body ENDING

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMICOLON a_vars a_funcs MAIN_COURSE body ENDING

    SEMICOLON       shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMICOLON . a_vars a_funcs MAIN_COURSE body ENDING
    (2) a_vars -> . empty
    (3) a_vars -> . vars
    (80) empty -> .
    (4) vars -> . MY_VARS ID COLON type SEMICOLON list_vars

    VOID            reduce using rule 80 (empty -> .)
    MAIN_COURSE     reduce using rule 80 (empty -> .)
    MY_VARS         shift and go to state 8

    a_vars                         shift and go to state 5
    empty                          shift and go to state 6
    vars                           shift and go to state 7

state 5

    (1) program -> PROGRAM ID SEMICOLON a_vars . a_funcs MAIN_COURSE body ENDING
    (69) a_funcs -> . empty
    (70) a_funcs -> . funcs b_funcs
    (80) empty -> .
    (68) funcs -> . VOID ID LPAREN list_params RPAREN LBRACE var_no_var body RBRACE SEMICOLON

    MAIN_COURSE     reduce using rule 80 (empty -> .)
    VOID            shift and go to state 12

    a_funcs                        shift and go to state 9
    empty                          shift and go to state 10
    funcs                          shift and go to state 11

state 6

    (2) a_vars -> empty .

    VOID            reduce using rule 2 (a_vars -> empty .)
    MAIN_COURSE     reduce using rule 2 (a_vars -> empty .)


state 7

    (3) a_vars -> vars .

    VOID            reduce using rule 3 (a_vars -> vars .)
    MAIN_COURSE     reduce using rule 3 (a_vars -> vars .)


state 8

    (4) vars -> MY_VARS . ID COLON type SEMICOLON list_vars

    ID              shift and go to state 13


state 9

    (1) program -> PROGRAM ID SEMICOLON a_vars a_funcs . MAIN_COURSE body ENDING

    MAIN_COURSE     shift and go to state 14


state 10

    (69) a_funcs -> empty .

    MAIN_COURSE     reduce using rule 69 (a_funcs -> empty .)


state 11

    (70) a_funcs -> funcs . b_funcs
    (71) b_funcs -> . funcs b_funcs
    (72) b_funcs -> . funcs
    (68) funcs -> . VOID ID LPAREN list_params RPAREN LBRACE var_no_var body RBRACE SEMICOLON

    VOID            shift and go to state 12

    funcs                          shift and go to state 15
    b_funcs                        shift and go to state 16

state 12

    (68) funcs -> VOID . ID LPAREN list_params RPAREN LBRACE var_no_var body RBRACE SEMICOLON

    ID              shift and go to state 17


state 13

    (4) vars -> MY_VARS ID . COLON type SEMICOLON list_vars

    COLON           shift and go to state 18


state 14

    (1) program -> PROGRAM ID SEMICOLON a_vars a_funcs MAIN_COURSE . body ENDING
    (9) body -> . LBRACE list_statements RBRACE

    LBRACE          shift and go to state 20

    body                           shift and go to state 19

state 15

    (71) b_funcs -> funcs . b_funcs
    (72) b_funcs -> funcs .
    (71) b_funcs -> . funcs b_funcs
    (72) b_funcs -> . funcs
    (68) funcs -> . VOID ID LPAREN list_params RPAREN LBRACE var_no_var body RBRACE SEMICOLON

    MAIN_COURSE     reduce using rule 72 (b_funcs -> funcs .)
    VOID            shift and go to state 12

    funcs                          shift and go to state 15
    b_funcs                        shift and go to state 21

state 16

    (70) a_funcs -> funcs b_funcs .

    MAIN_COURSE     reduce using rule 70 (a_funcs -> funcs b_funcs .)


state 17

    (68) funcs -> VOID ID . LPAREN list_params RPAREN LBRACE var_no_var body RBRACE SEMICOLON

    LPAREN          shift and go to state 22


state 18

    (4) vars -> MY_VARS ID COLON . type SEMICOLON list_vars
    (7) type -> . INT
    (8) type -> . FLOAT

    INT             shift and go to state 24
    FLOAT           shift and go to state 25

    type                           shift and go to state 23

state 19

    (1) program -> PROGRAM ID SEMICOLON a_vars a_funcs MAIN_COURSE body . ENDING

    ENDING          shift and go to state 26


state 20

    (9) body -> LBRACE . list_statements RBRACE
    (10) list_statements -> . statement body_rep
    (11) list_statements -> . empty
    (12) list_statements -> . statement
    (15) statement -> . assign
    (16) statement -> . condition
    (17) statement -> . do_cycle
    (18) statement -> . cycle
    (19) statement -> . f_call
    (20) statement -> . print_statement
    (80) empty -> .
    (22) assign -> . ID add_operand EQUALS add_operador expresion SEMICOLON
    (38) condition -> . IF LPAREN expresion RPAREN goto_false body else_part SEMICOLON
    (31) do_cycle -> . DO cycle_start body WHILE LPAREN expresion RPAREN goto_true SEMICOLON
    (32) cycle -> . WHILE cycle_start LPAREN expresion RPAREN generate_gotof body generate_goto finish_gotof SEMICOLON
    (79) f_call -> . ID LPAREN RPAREN SEMICOLON
    (21) print_statement -> . PRINT LPAREN list_expresion RPAREN SEMICOLON

    RBRACE          reduce using rule 80 (empty -> .)
    ID              shift and go to state 36
    IF              shift and go to state 37
    DO              shift and go to state 38
    WHILE           shift and go to state 39
    PRINT           shift and go to state 40

    list_statements                shift and go to state 27
    statement                      shift and go to state 28
    empty                          shift and go to state 29
    assign                         shift and go to state 30
    condition                      shift and go to state 31
    do_cycle                       shift and go to state 32
    cycle                          shift and go to state 33
    f_call                         shift and go to state 34
    print_statement                shift and go to state 35

state 21

    (71) b_funcs -> funcs b_funcs .

    MAIN_COURSE     reduce using rule 71 (b_funcs -> funcs b_funcs .)


state 22

    (68) funcs -> VOID ID LPAREN . list_params RPAREN LBRACE var_no_var body RBRACE SEMICOLON
    (73) list_params -> . empty
    (74) list_params -> . ID COLON type more_params
    (80) empty -> .

    ID              shift and go to state 41
    RPAREN          reduce using rule 80 (empty -> .)

    list_params                    shift and go to state 42
    empty                          shift and go to state 43

state 23

    (4) vars -> MY_VARS ID COLON type . SEMICOLON list_vars

    SEMICOLON       shift and go to state 44


state 24

    (7) type -> INT .

    SEMICOLON       reduce using rule 7 (type -> INT .)
    COMMA           reduce using rule 7 (type -> INT .)
    RPAREN          reduce using rule 7 (type -> INT .)


state 25

    (8) type -> FLOAT .

    SEMICOLON       reduce using rule 8 (type -> FLOAT .)
    COMMA           reduce using rule 8 (type -> FLOAT .)
    RPAREN          reduce using rule 8 (type -> FLOAT .)


state 26

    (1) program -> PROGRAM ID SEMICOLON a_vars a_funcs MAIN_COURSE body ENDING .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMICOLON a_vars a_funcs MAIN_COURSE body ENDING .)


state 27

    (9) body -> LBRACE list_statements . RBRACE

    RBRACE          shift and go to state 45


state 28

    (10) list_statements -> statement . body_rep
    (12) list_statements -> statement .
    (13) body_rep -> . statement body_rep
    (14) body_rep -> . statement
    (15) statement -> . assign
    (16) statement -> . condition
    (17) statement -> . do_cycle
    (18) statement -> . cycle
    (19) statement -> . f_call
    (20) statement -> . print_statement
    (22) assign -> . ID add_operand EQUALS add_operador expresion SEMICOLON
    (38) condition -> . IF LPAREN expresion RPAREN goto_false body else_part SEMICOLON
    (31) do_cycle -> . DO cycle_start body WHILE LPAREN expresion RPAREN goto_true SEMICOLON
    (32) cycle -> . WHILE cycle_start LPAREN expresion RPAREN generate_gotof body generate_goto finish_gotof SEMICOLON
    (79) f_call -> . ID LPAREN RPAREN SEMICOLON
    (21) print_statement -> . PRINT LPAREN list_expresion RPAREN SEMICOLON

    RBRACE          reduce using rule 12 (list_statements -> statement .)
    ID              shift and go to state 36
    IF              shift and go to state 37
    DO              shift and go to state 38
    WHILE           shift and go to state 39
    PRINT           shift and go to state 40

    statement                      shift and go to state 46
    body_rep                       shift and go to state 47
    assign                         shift and go to state 30
    condition                      shift and go to state 31
    do_cycle                       shift and go to state 32
    cycle                          shift and go to state 33
    f_call                         shift and go to state 34
    print_statement                shift and go to state 35

state 29

    (11) list_statements -> empty .

    RBRACE          reduce using rule 11 (list_statements -> empty .)


state 30

    (15) statement -> assign .

    ID              reduce using rule 15 (statement -> assign .)
    IF              reduce using rule 15 (statement -> assign .)
    DO              reduce using rule 15 (statement -> assign .)
    WHILE           reduce using rule 15 (statement -> assign .)
    PRINT           reduce using rule 15 (statement -> assign .)
    RBRACE          reduce using rule 15 (statement -> assign .)


state 31

    (16) statement -> condition .

    ID              reduce using rule 16 (statement -> condition .)
    IF              reduce using rule 16 (statement -> condition .)
    DO              reduce using rule 16 (statement -> condition .)
    WHILE           reduce using rule 16 (statement -> condition .)
    PRINT           reduce using rule 16 (statement -> condition .)
    RBRACE          reduce using rule 16 (statement -> condition .)


state 32

    (17) statement -> do_cycle .

    ID              reduce using rule 17 (statement -> do_cycle .)
    IF              reduce using rule 17 (statement -> do_cycle .)
    DO              reduce using rule 17 (statement -> do_cycle .)
    WHILE           reduce using rule 17 (statement -> do_cycle .)
    PRINT           reduce using rule 17 (statement -> do_cycle .)
    RBRACE          reduce using rule 17 (statement -> do_cycle .)


state 33

    (18) statement -> cycle .

    ID              reduce using rule 18 (statement -> cycle .)
    IF              reduce using rule 18 (statement -> cycle .)
    DO              reduce using rule 18 (statement -> cycle .)
    WHILE           reduce using rule 18 (statement -> cycle .)
    PRINT           reduce using rule 18 (statement -> cycle .)
    RBRACE          reduce using rule 18 (statement -> cycle .)


state 34

    (19) statement -> f_call .

    ID              reduce using rule 19 (statement -> f_call .)
    IF              reduce using rule 19 (statement -> f_call .)
    DO              reduce using rule 19 (statement -> f_call .)
    WHILE           reduce using rule 19 (statement -> f_call .)
    PRINT           reduce using rule 19 (statement -> f_call .)
    RBRACE          reduce using rule 19 (statement -> f_call .)


state 35

    (20) statement -> print_statement .

    ID              reduce using rule 20 (statement -> print_statement .)
    IF              reduce using rule 20 (statement -> print_statement .)
    DO              reduce using rule 20 (statement -> print_statement .)
    WHILE           reduce using rule 20 (statement -> print_statement .)
    PRINT           reduce using rule 20 (statement -> print_statement .)
    RBRACE          reduce using rule 20 (statement -> print_statement .)


state 36

    (22) assign -> ID . add_operand EQUALS add_operador expresion SEMICOLON
    (79) f_call -> ID . LPAREN RPAREN SEMICOLON
    (23) add_operand -> .

    LPAREN          shift and go to state 49
    EQUALS          reduce using rule 23 (add_operand -> .)

    add_operand                    shift and go to state 48

state 37

    (38) condition -> IF . LPAREN expresion RPAREN goto_false body else_part SEMICOLON

    LPAREN          shift and go to state 50


state 38

    (31) do_cycle -> DO . cycle_start body WHILE LPAREN expresion RPAREN goto_true SEMICOLON
    (36) cycle_start -> .

    LBRACE          reduce using rule 36 (cycle_start -> .)

    cycle_start                    shift and go to state 51

state 39

    (32) cycle -> WHILE . cycle_start LPAREN expresion RPAREN generate_gotof body generate_goto finish_gotof SEMICOLON
    (36) cycle_start -> .

    LPAREN          reduce using rule 36 (cycle_start -> .)

    cycle_start                    shift and go to state 52

state 40

    (21) print_statement -> PRINT . LPAREN list_expresion RPAREN SEMICOLON

    LPAREN          shift and go to state 53


state 41

    (74) list_params -> ID . COLON type more_params

    COLON           shift and go to state 54


state 42

    (68) funcs -> VOID ID LPAREN list_params . RPAREN LBRACE var_no_var body RBRACE SEMICOLON

    RPAREN          shift and go to state 55


state 43

    (73) list_params -> empty .

    RPAREN          reduce using rule 73 (list_params -> empty .)


state 44

    (4) vars -> MY_VARS ID COLON type SEMICOLON . list_vars
    (5) list_vars -> . empty
    (6) list_vars -> . ID COLON type SEMICOLON list_vars
    (80) empty -> .

    ID              shift and go to state 56
    VOID            reduce using rule 80 (empty -> .)
    MAIN_COURSE     reduce using rule 80 (empty -> .)
    LBRACE          reduce using rule 80 (empty -> .)

    list_vars                      shift and go to state 57
    empty                          shift and go to state 58

state 45

    (9) body -> LBRACE list_statements RBRACE .

    ENDING          reduce using rule 9 (body -> LBRACE list_statements RBRACE .)
    WHILE           reduce using rule 9 (body -> LBRACE list_statements RBRACE .)
    RBRACE          reduce using rule 9 (body -> LBRACE list_statements RBRACE .)
    ELSE            reduce using rule 9 (body -> LBRACE list_statements RBRACE .)
    SEMICOLON       reduce using rule 9 (body -> LBRACE list_statements RBRACE .)


state 46

    (13) body_rep -> statement . body_rep
    (14) body_rep -> statement .
    (13) body_rep -> . statement body_rep
    (14) body_rep -> . statement
    (15) statement -> . assign
    (16) statement -> . condition
    (17) statement -> . do_cycle
    (18) statement -> . cycle
    (19) statement -> . f_call
    (20) statement -> . print_statement
    (22) assign -> . ID add_operand EQUALS add_operador expresion SEMICOLON
    (38) condition -> . IF LPAREN expresion RPAREN goto_false body else_part SEMICOLON
    (31) do_cycle -> . DO cycle_start body WHILE LPAREN expresion RPAREN goto_true SEMICOLON
    (32) cycle -> . WHILE cycle_start LPAREN expresion RPAREN generate_gotof body generate_goto finish_gotof SEMICOLON
    (79) f_call -> . ID LPAREN RPAREN SEMICOLON
    (21) print_statement -> . PRINT LPAREN list_expresion RPAREN SEMICOLON

    RBRACE          reduce using rule 14 (body_rep -> statement .)
    ID              shift and go to state 36
    IF              shift and go to state 37
    DO              shift and go to state 38
    WHILE           shift and go to state 39
    PRINT           shift and go to state 40

    statement                      shift and go to state 46
    body_rep                       shift and go to state 59
    assign                         shift and go to state 30
    condition                      shift and go to state 31
    do_cycle                       shift and go to state 32
    cycle                          shift and go to state 33
    f_call                         shift and go to state 34
    print_statement                shift and go to state 35

state 47

    (10) list_statements -> statement body_rep .

    RBRACE          reduce using rule 10 (list_statements -> statement body_rep .)


state 48

    (22) assign -> ID add_operand . EQUALS add_operador expresion SEMICOLON

    EQUALS          shift and go to state 60


state 49

    (79) f_call -> ID LPAREN . RPAREN SEMICOLON

    RPAREN          shift and go to state 61


state 50

    (38) condition -> IF LPAREN . expresion RPAREN goto_false body else_part SEMICOLON
    (43) expresion -> . exp comparar_exp exp
    (44) expresion -> . exp
    (48) exp -> . termino add_termino
    (49) exp -> . termino add_termino next_termino
    (54) termino -> . factor add_factor next_factor
    (55) termino -> . factor add_factor
    (59) factor -> . LPAREN expresion RPAREN
    (60) factor -> . id_cte
    (62) id_cte -> . ID push_var
    (63) id_cte -> . cte push_const
    (66) cte -> . CTE_INT
    (67) cte -> . CTE_FLOAT

    LPAREN          shift and go to state 62
    ID              shift and go to state 68
    CTE_INT         shift and go to state 70
    CTE_FLOAT       shift and go to state 71

    expresion                      shift and go to state 63
    exp                            shift and go to state 64
    termino                        shift and go to state 65
    factor                         shift and go to state 66
    id_cte                         shift and go to state 67
    cte                            shift and go to state 69

state 51

    (31) do_cycle -> DO cycle_start . body WHILE LPAREN expresion RPAREN goto_true SEMICOLON
    (9) body -> . LBRACE list_statements RBRACE

    LBRACE          shift and go to state 20

    body                           shift and go to state 72

state 52

    (32) cycle -> WHILE cycle_start . LPAREN expresion RPAREN generate_gotof body generate_goto finish_gotof SEMICOLON

    LPAREN          shift and go to state 73


state 53

    (21) print_statement -> PRINT LPAREN . list_expresion RPAREN SEMICOLON
    (25) list_expresion -> . expresion addPrint
    (26) list_expresion -> . expresion addPrint COMMA list_expresion
    (27) list_expresion -> . CTE_STRING addPrintString
    (28) list_expresion -> . CTE_STRING addPrintString COMMA list_expresion
    (43) expresion -> . exp comparar_exp exp
    (44) expresion -> . exp
    (48) exp -> . termino add_termino
    (49) exp -> . termino add_termino next_termino
    (54) termino -> . factor add_factor next_factor
    (55) termino -> . factor add_factor
    (59) factor -> . LPAREN expresion RPAREN
    (60) factor -> . id_cte
    (62) id_cte -> . ID push_var
    (63) id_cte -> . cte push_const
    (66) cte -> . CTE_INT
    (67) cte -> . CTE_FLOAT

    CTE_STRING      shift and go to state 76
    LPAREN          shift and go to state 62
    ID              shift and go to state 68
    CTE_INT         shift and go to state 70
    CTE_FLOAT       shift and go to state 71

    list_expresion                 shift and go to state 74
    expresion                      shift and go to state 75
    exp                            shift and go to state 64
    termino                        shift and go to state 65
    factor                         shift and go to state 66
    id_cte                         shift and go to state 67
    cte                            shift and go to state 69

state 54

    (74) list_params -> ID COLON . type more_params
    (7) type -> . INT
    (8) type -> . FLOAT

    INT             shift and go to state 24
    FLOAT           shift and go to state 25

    type                           shift and go to state 77

state 55

    (68) funcs -> VOID ID LPAREN list_params RPAREN . LBRACE var_no_var body RBRACE SEMICOLON

    LBRACE          shift and go to state 78


state 56

    (6) list_vars -> ID . COLON type SEMICOLON list_vars

    COLON           shift and go to state 79


state 57

    (4) vars -> MY_VARS ID COLON type SEMICOLON list_vars .

    VOID            reduce using rule 4 (vars -> MY_VARS ID COLON type SEMICOLON list_vars .)
    MAIN_COURSE     reduce using rule 4 (vars -> MY_VARS ID COLON type SEMICOLON list_vars .)
    LBRACE          reduce using rule 4 (vars -> MY_VARS ID COLON type SEMICOLON list_vars .)


state 58

    (5) list_vars -> empty .

    VOID            reduce using rule 5 (list_vars -> empty .)
    MAIN_COURSE     reduce using rule 5 (list_vars -> empty .)
    LBRACE          reduce using rule 5 (list_vars -> empty .)


state 59

    (13) body_rep -> statement body_rep .

    RBRACE          reduce using rule 13 (body_rep -> statement body_rep .)


state 60

    (22) assign -> ID add_operand EQUALS . add_operador expresion SEMICOLON
    (24) add_operador -> .

    LPAREN          reduce using rule 24 (add_operador -> .)
    ID              reduce using rule 24 (add_operador -> .)
    CTE_INT         reduce using rule 24 (add_operador -> .)
    CTE_FLOAT       reduce using rule 24 (add_operador -> .)

    add_operador                   shift and go to state 80

state 61

    (79) f_call -> ID LPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 81


state 62

    (59) factor -> LPAREN . expresion RPAREN
    (43) expresion -> . exp comparar_exp exp
    (44) expresion -> . exp
    (48) exp -> . termino add_termino
    (49) exp -> . termino add_termino next_termino
    (54) termino -> . factor add_factor next_factor
    (55) termino -> . factor add_factor
    (59) factor -> . LPAREN expresion RPAREN
    (60) factor -> . id_cte
    (62) id_cte -> . ID push_var
    (63) id_cte -> . cte push_const
    (66) cte -> . CTE_INT
    (67) cte -> . CTE_FLOAT

    LPAREN          shift and go to state 62
    ID              shift and go to state 68
    CTE_INT         shift and go to state 70
    CTE_FLOAT       shift and go to state 71

    expresion                      shift and go to state 82
    exp                            shift and go to state 64
    termino                        shift and go to state 65
    factor                         shift and go to state 66
    id_cte                         shift and go to state 67
    cte                            shift and go to state 69

state 63

    (38) condition -> IF LPAREN expresion . RPAREN goto_false body else_part SEMICOLON

    RPAREN          shift and go to state 83


state 64

    (43) expresion -> exp . comparar_exp exp
    (44) expresion -> exp .
    (45) comparar_exp -> . LT
    (46) comparar_exp -> . GT
    (47) comparar_exp -> . NE

    RPAREN          reduce using rule 44 (expresion -> exp .)
    COMMA           reduce using rule 44 (expresion -> exp .)
    SEMICOLON       reduce using rule 44 (expresion -> exp .)
    LT              shift and go to state 85
    GT              shift and go to state 86
    NE              shift and go to state 87

    comparar_exp                   shift and go to state 84

state 65

    (48) exp -> termino . add_termino
    (49) exp -> termino . add_termino next_termino
    (50) add_termino -> .

    PLUS            reduce using rule 50 (add_termino -> .)
    MINUS           reduce using rule 50 (add_termino -> .)
    LT              reduce using rule 50 (add_termino -> .)
    GT              reduce using rule 50 (add_termino -> .)
    NE              reduce using rule 50 (add_termino -> .)
    RPAREN          reduce using rule 50 (add_termino -> .)
    COMMA           reduce using rule 50 (add_termino -> .)
    SEMICOLON       reduce using rule 50 (add_termino -> .)

    add_termino                    shift and go to state 88

state 66

    (54) termino -> factor . add_factor next_factor
    (55) termino -> factor . add_factor
    (61) add_factor -> .

    TIMES           reduce using rule 61 (add_factor -> .)
    DIVIDE          reduce using rule 61 (add_factor -> .)
    PLUS            reduce using rule 61 (add_factor -> .)
    MINUS           reduce using rule 61 (add_factor -> .)
    LT              reduce using rule 61 (add_factor -> .)
    GT              reduce using rule 61 (add_factor -> .)
    NE              reduce using rule 61 (add_factor -> .)
    RPAREN          reduce using rule 61 (add_factor -> .)
    COMMA           reduce using rule 61 (add_factor -> .)
    SEMICOLON       reduce using rule 61 (add_factor -> .)

    add_factor                     shift and go to state 89

state 67

    (60) factor -> id_cte .

    TIMES           reduce using rule 60 (factor -> id_cte .)
    DIVIDE          reduce using rule 60 (factor -> id_cte .)
    PLUS            reduce using rule 60 (factor -> id_cte .)
    MINUS           reduce using rule 60 (factor -> id_cte .)
    LT              reduce using rule 60 (factor -> id_cte .)
    GT              reduce using rule 60 (factor -> id_cte .)
    NE              reduce using rule 60 (factor -> id_cte .)
    RPAREN          reduce using rule 60 (factor -> id_cte .)
    COMMA           reduce using rule 60 (factor -> id_cte .)
    SEMICOLON       reduce using rule 60 (factor -> id_cte .)


state 68

    (62) id_cte -> ID . push_var
    (65) push_var -> .

    TIMES           reduce using rule 65 (push_var -> .)
    DIVIDE          reduce using rule 65 (push_var -> .)
    PLUS            reduce using rule 65 (push_var -> .)
    MINUS           reduce using rule 65 (push_var -> .)
    LT              reduce using rule 65 (push_var -> .)
    GT              reduce using rule 65 (push_var -> .)
    NE              reduce using rule 65 (push_var -> .)
    RPAREN          reduce using rule 65 (push_var -> .)
    COMMA           reduce using rule 65 (push_var -> .)
    SEMICOLON       reduce using rule 65 (push_var -> .)

    push_var                       shift and go to state 90

state 69

    (63) id_cte -> cte . push_const
    (64) push_const -> .

    TIMES           reduce using rule 64 (push_const -> .)
    DIVIDE          reduce using rule 64 (push_const -> .)
    PLUS            reduce using rule 64 (push_const -> .)
    MINUS           reduce using rule 64 (push_const -> .)
    LT              reduce using rule 64 (push_const -> .)
    GT              reduce using rule 64 (push_const -> .)
    NE              reduce using rule 64 (push_const -> .)
    RPAREN          reduce using rule 64 (push_const -> .)
    COMMA           reduce using rule 64 (push_const -> .)
    SEMICOLON       reduce using rule 64 (push_const -> .)

    push_const                     shift and go to state 91

state 70

    (66) cte -> CTE_INT .

    TIMES           reduce using rule 66 (cte -> CTE_INT .)
    DIVIDE          reduce using rule 66 (cte -> CTE_INT .)
    PLUS            reduce using rule 66 (cte -> CTE_INT .)
    MINUS           reduce using rule 66 (cte -> CTE_INT .)
    LT              reduce using rule 66 (cte -> CTE_INT .)
    GT              reduce using rule 66 (cte -> CTE_INT .)
    NE              reduce using rule 66 (cte -> CTE_INT .)
    RPAREN          reduce using rule 66 (cte -> CTE_INT .)
    COMMA           reduce using rule 66 (cte -> CTE_INT .)
    SEMICOLON       reduce using rule 66 (cte -> CTE_INT .)


state 71

    (67) cte -> CTE_FLOAT .

    TIMES           reduce using rule 67 (cte -> CTE_FLOAT .)
    DIVIDE          reduce using rule 67 (cte -> CTE_FLOAT .)
    PLUS            reduce using rule 67 (cte -> CTE_FLOAT .)
    MINUS           reduce using rule 67 (cte -> CTE_FLOAT .)
    LT              reduce using rule 67 (cte -> CTE_FLOAT .)
    GT              reduce using rule 67 (cte -> CTE_FLOAT .)
    NE              reduce using rule 67 (cte -> CTE_FLOAT .)
    RPAREN          reduce using rule 67 (cte -> CTE_FLOAT .)
    COMMA           reduce using rule 67 (cte -> CTE_FLOAT .)
    SEMICOLON       reduce using rule 67 (cte -> CTE_FLOAT .)


state 72

    (31) do_cycle -> DO cycle_start body . WHILE LPAREN expresion RPAREN goto_true SEMICOLON

    WHILE           shift and go to state 92


state 73

    (32) cycle -> WHILE cycle_start LPAREN . expresion RPAREN generate_gotof body generate_goto finish_gotof SEMICOLON
    (43) expresion -> . exp comparar_exp exp
    (44) expresion -> . exp
    (48) exp -> . termino add_termino
    (49) exp -> . termino add_termino next_termino
    (54) termino -> . factor add_factor next_factor
    (55) termino -> . factor add_factor
    (59) factor -> . LPAREN expresion RPAREN
    (60) factor -> . id_cte
    (62) id_cte -> . ID push_var
    (63) id_cte -> . cte push_const
    (66) cte -> . CTE_INT
    (67) cte -> . CTE_FLOAT

    LPAREN          shift and go to state 62
    ID              shift and go to state 68
    CTE_INT         shift and go to state 70
    CTE_FLOAT       shift and go to state 71

    expresion                      shift and go to state 93
    exp                            shift and go to state 64
    termino                        shift and go to state 65
    factor                         shift and go to state 66
    id_cte                         shift and go to state 67
    cte                            shift and go to state 69

state 74

    (21) print_statement -> PRINT LPAREN list_expresion . RPAREN SEMICOLON

    RPAREN          shift and go to state 94


state 75

    (25) list_expresion -> expresion . addPrint
    (26) list_expresion -> expresion . addPrint COMMA list_expresion
    (29) addPrint -> .

    COMMA           reduce using rule 29 (addPrint -> .)
    RPAREN          reduce using rule 29 (addPrint -> .)

    addPrint                       shift and go to state 95

state 76

    (27) list_expresion -> CTE_STRING . addPrintString
    (28) list_expresion -> CTE_STRING . addPrintString COMMA list_expresion
    (30) addPrintString -> .

    COMMA           reduce using rule 30 (addPrintString -> .)
    RPAREN          reduce using rule 30 (addPrintString -> .)

    addPrintString                 shift and go to state 96

state 77

    (74) list_params -> ID COLON type . more_params
    (75) more_params -> . empty
    (76) more_params -> . COMMA ID COLON type more_params
    (80) empty -> .

    COMMA           shift and go to state 99
    RPAREN          reduce using rule 80 (empty -> .)

    more_params                    shift and go to state 97
    empty                          shift and go to state 98

state 78

    (68) funcs -> VOID ID LPAREN list_params RPAREN LBRACE . var_no_var body RBRACE SEMICOLON
    (77) var_no_var -> . empty
    (78) var_no_var -> . vars
    (80) empty -> .
    (4) vars -> . MY_VARS ID COLON type SEMICOLON list_vars

    LBRACE          reduce using rule 80 (empty -> .)
    MY_VARS         shift and go to state 8

    var_no_var                     shift and go to state 100
    empty                          shift and go to state 101
    vars                           shift and go to state 102

state 79

    (6) list_vars -> ID COLON . type SEMICOLON list_vars
    (7) type -> . INT
    (8) type -> . FLOAT

    INT             shift and go to state 24
    FLOAT           shift and go to state 25

    type                           shift and go to state 103

state 80

    (22) assign -> ID add_operand EQUALS add_operador . expresion SEMICOLON
    (43) expresion -> . exp comparar_exp exp
    (44) expresion -> . exp
    (48) exp -> . termino add_termino
    (49) exp -> . termino add_termino next_termino
    (54) termino -> . factor add_factor next_factor
    (55) termino -> . factor add_factor
    (59) factor -> . LPAREN expresion RPAREN
    (60) factor -> . id_cte
    (62) id_cte -> . ID push_var
    (63) id_cte -> . cte push_const
    (66) cte -> . CTE_INT
    (67) cte -> . CTE_FLOAT

    LPAREN          shift and go to state 62
    ID              shift and go to state 68
    CTE_INT         shift and go to state 70
    CTE_FLOAT       shift and go to state 71

    expresion                      shift and go to state 104
    exp                            shift and go to state 64
    termino                        shift and go to state 65
    factor                         shift and go to state 66
    id_cte                         shift and go to state 67
    cte                            shift and go to state 69

state 81

    (79) f_call -> ID LPAREN RPAREN SEMICOLON .

    ID              reduce using rule 79 (f_call -> ID LPAREN RPAREN SEMICOLON .)
    IF              reduce using rule 79 (f_call -> ID LPAREN RPAREN SEMICOLON .)
    DO              reduce using rule 79 (f_call -> ID LPAREN RPAREN SEMICOLON .)
    WHILE           reduce using rule 79 (f_call -> ID LPAREN RPAREN SEMICOLON .)
    PRINT           reduce using rule 79 (f_call -> ID LPAREN RPAREN SEMICOLON .)
    RBRACE          reduce using rule 79 (f_call -> ID LPAREN RPAREN SEMICOLON .)


state 82

    (59) factor -> LPAREN expresion . RPAREN

    RPAREN          shift and go to state 105


state 83

    (38) condition -> IF LPAREN expresion RPAREN . goto_false body else_part SEMICOLON
    (39) goto_false -> .

    LBRACE          reduce using rule 39 (goto_false -> .)

    goto_false                     shift and go to state 106

state 84

    (43) expresion -> exp comparar_exp . exp
    (48) exp -> . termino add_termino
    (49) exp -> . termino add_termino next_termino
    (54) termino -> . factor add_factor next_factor
    (55) termino -> . factor add_factor
    (59) factor -> . LPAREN expresion RPAREN
    (60) factor -> . id_cte
    (62) id_cte -> . ID push_var
    (63) id_cte -> . cte push_const
    (66) cte -> . CTE_INT
    (67) cte -> . CTE_FLOAT

    LPAREN          shift and go to state 62
    ID              shift and go to state 68
    CTE_INT         shift and go to state 70
    CTE_FLOAT       shift and go to state 71

    exp                            shift and go to state 107
    termino                        shift and go to state 65
    factor                         shift and go to state 66
    id_cte                         shift and go to state 67
    cte                            shift and go to state 69

state 85

    (45) comparar_exp -> LT .

    LPAREN          reduce using rule 45 (comparar_exp -> LT .)
    ID              reduce using rule 45 (comparar_exp -> LT .)
    CTE_INT         reduce using rule 45 (comparar_exp -> LT .)
    CTE_FLOAT       reduce using rule 45 (comparar_exp -> LT .)


state 86

    (46) comparar_exp -> GT .

    LPAREN          reduce using rule 46 (comparar_exp -> GT .)
    ID              reduce using rule 46 (comparar_exp -> GT .)
    CTE_INT         reduce using rule 46 (comparar_exp -> GT .)
    CTE_FLOAT       reduce using rule 46 (comparar_exp -> GT .)


state 87

    (47) comparar_exp -> NE .

    LPAREN          reduce using rule 47 (comparar_exp -> NE .)
    ID              reduce using rule 47 (comparar_exp -> NE .)
    CTE_INT         reduce using rule 47 (comparar_exp -> NE .)
    CTE_FLOAT       reduce using rule 47 (comparar_exp -> NE .)


state 88

    (48) exp -> termino add_termino .
    (49) exp -> termino add_termino . next_termino
    (51) next_termino -> . sum_rest exp
    (52) sum_rest -> . PLUS
    (53) sum_rest -> . MINUS

    LT              reduce using rule 48 (exp -> termino add_termino .)
    GT              reduce using rule 48 (exp -> termino add_termino .)
    NE              reduce using rule 48 (exp -> termino add_termino .)
    RPAREN          reduce using rule 48 (exp -> termino add_termino .)
    COMMA           reduce using rule 48 (exp -> termino add_termino .)
    SEMICOLON       reduce using rule 48 (exp -> termino add_termino .)
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111

    next_termino                   shift and go to state 108
    sum_rest                       shift and go to state 109

state 89

    (54) termino -> factor add_factor . next_factor
    (55) termino -> factor add_factor .
    (56) next_factor -> . mult_div termino
    (57) mult_div -> . TIMES
    (58) mult_div -> . DIVIDE

    PLUS            reduce using rule 55 (termino -> factor add_factor .)
    MINUS           reduce using rule 55 (termino -> factor add_factor .)
    LT              reduce using rule 55 (termino -> factor add_factor .)
    GT              reduce using rule 55 (termino -> factor add_factor .)
    NE              reduce using rule 55 (termino -> factor add_factor .)
    RPAREN          reduce using rule 55 (termino -> factor add_factor .)
    COMMA           reduce using rule 55 (termino -> factor add_factor .)
    SEMICOLON       reduce using rule 55 (termino -> factor add_factor .)
    TIMES           shift and go to state 114
    DIVIDE          shift and go to state 115

    next_factor                    shift and go to state 112
    mult_div                       shift and go to state 113

state 90

    (62) id_cte -> ID push_var .

    TIMES           reduce using rule 62 (id_cte -> ID push_var .)
    DIVIDE          reduce using rule 62 (id_cte -> ID push_var .)
    PLUS            reduce using rule 62 (id_cte -> ID push_var .)
    MINUS           reduce using rule 62 (id_cte -> ID push_var .)
    LT              reduce using rule 62 (id_cte -> ID push_var .)
    GT              reduce using rule 62 (id_cte -> ID push_var .)
    NE              reduce using rule 62 (id_cte -> ID push_var .)
    RPAREN          reduce using rule 62 (id_cte -> ID push_var .)
    COMMA           reduce using rule 62 (id_cte -> ID push_var .)
    SEMICOLON       reduce using rule 62 (id_cte -> ID push_var .)


state 91

    (63) id_cte -> cte push_const .

    TIMES           reduce using rule 63 (id_cte -> cte push_const .)
    DIVIDE          reduce using rule 63 (id_cte -> cte push_const .)
    PLUS            reduce using rule 63 (id_cte -> cte push_const .)
    MINUS           reduce using rule 63 (id_cte -> cte push_const .)
    LT              reduce using rule 63 (id_cte -> cte push_const .)
    GT              reduce using rule 63 (id_cte -> cte push_const .)
    NE              reduce using rule 63 (id_cte -> cte push_const .)
    RPAREN          reduce using rule 63 (id_cte -> cte push_const .)
    COMMA           reduce using rule 63 (id_cte -> cte push_const .)
    SEMICOLON       reduce using rule 63 (id_cte -> cte push_const .)


state 92

    (31) do_cycle -> DO cycle_start body WHILE . LPAREN expresion RPAREN goto_true SEMICOLON

    LPAREN          shift and go to state 116


state 93

    (32) cycle -> WHILE cycle_start LPAREN expresion . RPAREN generate_gotof body generate_goto finish_gotof SEMICOLON

    RPAREN          shift and go to state 117


state 94

    (21) print_statement -> PRINT LPAREN list_expresion RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 118


state 95

    (25) list_expresion -> expresion addPrint .
    (26) list_expresion -> expresion addPrint . COMMA list_expresion

    RPAREN          reduce using rule 25 (list_expresion -> expresion addPrint .)
    COMMA           shift and go to state 119


state 96

    (27) list_expresion -> CTE_STRING addPrintString .
    (28) list_expresion -> CTE_STRING addPrintString . COMMA list_expresion

    RPAREN          reduce using rule 27 (list_expresion -> CTE_STRING addPrintString .)
    COMMA           shift and go to state 120


state 97

    (74) list_params -> ID COLON type more_params .

    RPAREN          reduce using rule 74 (list_params -> ID COLON type more_params .)


state 98

    (75) more_params -> empty .

    RPAREN          reduce using rule 75 (more_params -> empty .)


state 99

    (76) more_params -> COMMA . ID COLON type more_params

    ID              shift and go to state 121


state 100

    (68) funcs -> VOID ID LPAREN list_params RPAREN LBRACE var_no_var . body RBRACE SEMICOLON
    (9) body -> . LBRACE list_statements RBRACE

    LBRACE          shift and go to state 20

    body                           shift and go to state 122

state 101

    (77) var_no_var -> empty .

    LBRACE          reduce using rule 77 (var_no_var -> empty .)


state 102

    (78) var_no_var -> vars .

    LBRACE          reduce using rule 78 (var_no_var -> vars .)


state 103

    (6) list_vars -> ID COLON type . SEMICOLON list_vars

    SEMICOLON       shift and go to state 123


state 104

    (22) assign -> ID add_operand EQUALS add_operador expresion . SEMICOLON

    SEMICOLON       shift and go to state 124


state 105

    (59) factor -> LPAREN expresion RPAREN .

    TIMES           reduce using rule 59 (factor -> LPAREN expresion RPAREN .)
    DIVIDE          reduce using rule 59 (factor -> LPAREN expresion RPAREN .)
    PLUS            reduce using rule 59 (factor -> LPAREN expresion RPAREN .)
    MINUS           reduce using rule 59 (factor -> LPAREN expresion RPAREN .)
    LT              reduce using rule 59 (factor -> LPAREN expresion RPAREN .)
    GT              reduce using rule 59 (factor -> LPAREN expresion RPAREN .)
    NE              reduce using rule 59 (factor -> LPAREN expresion RPAREN .)
    RPAREN          reduce using rule 59 (factor -> LPAREN expresion RPAREN .)
    COMMA           reduce using rule 59 (factor -> LPAREN expresion RPAREN .)
    SEMICOLON       reduce using rule 59 (factor -> LPAREN expresion RPAREN .)


state 106

    (38) condition -> IF LPAREN expresion RPAREN goto_false . body else_part SEMICOLON
    (9) body -> . LBRACE list_statements RBRACE

    LBRACE          shift and go to state 20

    body                           shift and go to state 125

state 107

    (43) expresion -> exp comparar_exp exp .

    RPAREN          reduce using rule 43 (expresion -> exp comparar_exp exp .)
    COMMA           reduce using rule 43 (expresion -> exp comparar_exp exp .)
    SEMICOLON       reduce using rule 43 (expresion -> exp comparar_exp exp .)


state 108

    (49) exp -> termino add_termino next_termino .

    LT              reduce using rule 49 (exp -> termino add_termino next_termino .)
    GT              reduce using rule 49 (exp -> termino add_termino next_termino .)
    NE              reduce using rule 49 (exp -> termino add_termino next_termino .)
    RPAREN          reduce using rule 49 (exp -> termino add_termino next_termino .)
    COMMA           reduce using rule 49 (exp -> termino add_termino next_termino .)
    SEMICOLON       reduce using rule 49 (exp -> termino add_termino next_termino .)


state 109

    (51) next_termino -> sum_rest . exp
    (48) exp -> . termino add_termino
    (49) exp -> . termino add_termino next_termino
    (54) termino -> . factor add_factor next_factor
    (55) termino -> . factor add_factor
    (59) factor -> . LPAREN expresion RPAREN
    (60) factor -> . id_cte
    (62) id_cte -> . ID push_var
    (63) id_cte -> . cte push_const
    (66) cte -> . CTE_INT
    (67) cte -> . CTE_FLOAT

    LPAREN          shift and go to state 62
    ID              shift and go to state 68
    CTE_INT         shift and go to state 70
    CTE_FLOAT       shift and go to state 71

    exp                            shift and go to state 126
    termino                        shift and go to state 65
    factor                         shift and go to state 66
    id_cte                         shift and go to state 67
    cte                            shift and go to state 69

state 110

    (52) sum_rest -> PLUS .

    LPAREN          reduce using rule 52 (sum_rest -> PLUS .)
    ID              reduce using rule 52 (sum_rest -> PLUS .)
    CTE_INT         reduce using rule 52 (sum_rest -> PLUS .)
    CTE_FLOAT       reduce using rule 52 (sum_rest -> PLUS .)


state 111

    (53) sum_rest -> MINUS .

    LPAREN          reduce using rule 53 (sum_rest -> MINUS .)
    ID              reduce using rule 53 (sum_rest -> MINUS .)
    CTE_INT         reduce using rule 53 (sum_rest -> MINUS .)
    CTE_FLOAT       reduce using rule 53 (sum_rest -> MINUS .)


state 112

    (54) termino -> factor add_factor next_factor .

    PLUS            reduce using rule 54 (termino -> factor add_factor next_factor .)
    MINUS           reduce using rule 54 (termino -> factor add_factor next_factor .)
    LT              reduce using rule 54 (termino -> factor add_factor next_factor .)
    GT              reduce using rule 54 (termino -> factor add_factor next_factor .)
    NE              reduce using rule 54 (termino -> factor add_factor next_factor .)
    RPAREN          reduce using rule 54 (termino -> factor add_factor next_factor .)
    COMMA           reduce using rule 54 (termino -> factor add_factor next_factor .)
    SEMICOLON       reduce using rule 54 (termino -> factor add_factor next_factor .)


state 113

    (56) next_factor -> mult_div . termino
    (54) termino -> . factor add_factor next_factor
    (55) termino -> . factor add_factor
    (59) factor -> . LPAREN expresion RPAREN
    (60) factor -> . id_cte
    (62) id_cte -> . ID push_var
    (63) id_cte -> . cte push_const
    (66) cte -> . CTE_INT
    (67) cte -> . CTE_FLOAT

    LPAREN          shift and go to state 62
    ID              shift and go to state 68
    CTE_INT         shift and go to state 70
    CTE_FLOAT       shift and go to state 71

    termino                        shift and go to state 127
    factor                         shift and go to state 66
    id_cte                         shift and go to state 67
    cte                            shift and go to state 69

state 114

    (57) mult_div -> TIMES .

    LPAREN          reduce using rule 57 (mult_div -> TIMES .)
    ID              reduce using rule 57 (mult_div -> TIMES .)
    CTE_INT         reduce using rule 57 (mult_div -> TIMES .)
    CTE_FLOAT       reduce using rule 57 (mult_div -> TIMES .)


state 115

    (58) mult_div -> DIVIDE .

    LPAREN          reduce using rule 58 (mult_div -> DIVIDE .)
    ID              reduce using rule 58 (mult_div -> DIVIDE .)
    CTE_INT         reduce using rule 58 (mult_div -> DIVIDE .)
    CTE_FLOAT       reduce using rule 58 (mult_div -> DIVIDE .)


state 116

    (31) do_cycle -> DO cycle_start body WHILE LPAREN . expresion RPAREN goto_true SEMICOLON
    (43) expresion -> . exp comparar_exp exp
    (44) expresion -> . exp
    (48) exp -> . termino add_termino
    (49) exp -> . termino add_termino next_termino
    (54) termino -> . factor add_factor next_factor
    (55) termino -> . factor add_factor
    (59) factor -> . LPAREN expresion RPAREN
    (60) factor -> . id_cte
    (62) id_cte -> . ID push_var
    (63) id_cte -> . cte push_const
    (66) cte -> . CTE_INT
    (67) cte -> . CTE_FLOAT

    LPAREN          shift and go to state 62
    ID              shift and go to state 68
    CTE_INT         shift and go to state 70
    CTE_FLOAT       shift and go to state 71

    expresion                      shift and go to state 128
    exp                            shift and go to state 64
    termino                        shift and go to state 65
    factor                         shift and go to state 66
    id_cte                         shift and go to state 67
    cte                            shift and go to state 69

state 117

    (32) cycle -> WHILE cycle_start LPAREN expresion RPAREN . generate_gotof body generate_goto finish_gotof SEMICOLON
    (33) generate_gotof -> .

    LBRACE          reduce using rule 33 (generate_gotof -> .)

    generate_gotof                 shift and go to state 129

state 118

    (21) print_statement -> PRINT LPAREN list_expresion RPAREN SEMICOLON .

    ID              reduce using rule 21 (print_statement -> PRINT LPAREN list_expresion RPAREN SEMICOLON .)
    IF              reduce using rule 21 (print_statement -> PRINT LPAREN list_expresion RPAREN SEMICOLON .)
    DO              reduce using rule 21 (print_statement -> PRINT LPAREN list_expresion RPAREN SEMICOLON .)
    WHILE           reduce using rule 21 (print_statement -> PRINT LPAREN list_expresion RPAREN SEMICOLON .)
    PRINT           reduce using rule 21 (print_statement -> PRINT LPAREN list_expresion RPAREN SEMICOLON .)
    RBRACE          reduce using rule 21 (print_statement -> PRINT LPAREN list_expresion RPAREN SEMICOLON .)


state 119

    (26) list_expresion -> expresion addPrint COMMA . list_expresion
    (25) list_expresion -> . expresion addPrint
    (26) list_expresion -> . expresion addPrint COMMA list_expresion
    (27) list_expresion -> . CTE_STRING addPrintString
    (28) list_expresion -> . CTE_STRING addPrintString COMMA list_expresion
    (43) expresion -> . exp comparar_exp exp
    (44) expresion -> . exp
    (48) exp -> . termino add_termino
    (49) exp -> . termino add_termino next_termino
    (54) termino -> . factor add_factor next_factor
    (55) termino -> . factor add_factor
    (59) factor -> . LPAREN expresion RPAREN
    (60) factor -> . id_cte
    (62) id_cte -> . ID push_var
    (63) id_cte -> . cte push_const
    (66) cte -> . CTE_INT
    (67) cte -> . CTE_FLOAT

    CTE_STRING      shift and go to state 76
    LPAREN          shift and go to state 62
    ID              shift and go to state 68
    CTE_INT         shift and go to state 70
    CTE_FLOAT       shift and go to state 71

    expresion                      shift and go to state 75
    list_expresion                 shift and go to state 130
    exp                            shift and go to state 64
    termino                        shift and go to state 65
    factor                         shift and go to state 66
    id_cte                         shift and go to state 67
    cte                            shift and go to state 69

state 120

    (28) list_expresion -> CTE_STRING addPrintString COMMA . list_expresion
    (25) list_expresion -> . expresion addPrint
    (26) list_expresion -> . expresion addPrint COMMA list_expresion
    (27) list_expresion -> . CTE_STRING addPrintString
    (28) list_expresion -> . CTE_STRING addPrintString COMMA list_expresion
    (43) expresion -> . exp comparar_exp exp
    (44) expresion -> . exp
    (48) exp -> . termino add_termino
    (49) exp -> . termino add_termino next_termino
    (54) termino -> . factor add_factor next_factor
    (55) termino -> . factor add_factor
    (59) factor -> . LPAREN expresion RPAREN
    (60) factor -> . id_cte
    (62) id_cte -> . ID push_var
    (63) id_cte -> . cte push_const
    (66) cte -> . CTE_INT
    (67) cte -> . CTE_FLOAT

    CTE_STRING      shift and go to state 76
    LPAREN          shift and go to state 62
    ID              shift and go to state 68
    CTE_INT         shift and go to state 70
    CTE_FLOAT       shift and go to state 71

    list_expresion                 shift and go to state 131
    expresion                      shift and go to state 75
    exp                            shift and go to state 64
    termino                        shift and go to state 65
    factor                         shift and go to state 66
    id_cte                         shift and go to state 67
    cte                            shift and go to state 69

state 121

    (76) more_params -> COMMA ID . COLON type more_params

    COLON           shift and go to state 132


state 122

    (68) funcs -> VOID ID LPAREN list_params RPAREN LBRACE var_no_var body . RBRACE SEMICOLON

    RBRACE          shift and go to state 133


state 123

    (6) list_vars -> ID COLON type SEMICOLON . list_vars
    (5) list_vars -> . empty
    (6) list_vars -> . ID COLON type SEMICOLON list_vars
    (80) empty -> .

    ID              shift and go to state 56
    VOID            reduce using rule 80 (empty -> .)
    MAIN_COURSE     reduce using rule 80 (empty -> .)
    LBRACE          reduce using rule 80 (empty -> .)

    list_vars                      shift and go to state 134
    empty                          shift and go to state 58

state 124

    (22) assign -> ID add_operand EQUALS add_operador expresion SEMICOLON .

    ID              reduce using rule 22 (assign -> ID add_operand EQUALS add_operador expresion SEMICOLON .)
    IF              reduce using rule 22 (assign -> ID add_operand EQUALS add_operador expresion SEMICOLON .)
    DO              reduce using rule 22 (assign -> ID add_operand EQUALS add_operador expresion SEMICOLON .)
    WHILE           reduce using rule 22 (assign -> ID add_operand EQUALS add_operador expresion SEMICOLON .)
    PRINT           reduce using rule 22 (assign -> ID add_operand EQUALS add_operador expresion SEMICOLON .)
    RBRACE          reduce using rule 22 (assign -> ID add_operand EQUALS add_operador expresion SEMICOLON .)


state 125

    (38) condition -> IF LPAREN expresion RPAREN goto_false body . else_part SEMICOLON
    (40) else_part -> . ELSE goto body
    (41) else_part -> . empty
    (80) empty -> .

    ELSE            shift and go to state 136
    SEMICOLON       reduce using rule 80 (empty -> .)

    else_part                      shift and go to state 135
    empty                          shift and go to state 137

state 126

    (51) next_termino -> sum_rest exp .

    LT              reduce using rule 51 (next_termino -> sum_rest exp .)
    GT              reduce using rule 51 (next_termino -> sum_rest exp .)
    NE              reduce using rule 51 (next_termino -> sum_rest exp .)
    RPAREN          reduce using rule 51 (next_termino -> sum_rest exp .)
    COMMA           reduce using rule 51 (next_termino -> sum_rest exp .)
    SEMICOLON       reduce using rule 51 (next_termino -> sum_rest exp .)


state 127

    (56) next_factor -> mult_div termino .

    PLUS            reduce using rule 56 (next_factor -> mult_div termino .)
    MINUS           reduce using rule 56 (next_factor -> mult_div termino .)
    LT              reduce using rule 56 (next_factor -> mult_div termino .)
    GT              reduce using rule 56 (next_factor -> mult_div termino .)
    NE              reduce using rule 56 (next_factor -> mult_div termino .)
    RPAREN          reduce using rule 56 (next_factor -> mult_div termino .)
    COMMA           reduce using rule 56 (next_factor -> mult_div termino .)
    SEMICOLON       reduce using rule 56 (next_factor -> mult_div termino .)


state 128

    (31) do_cycle -> DO cycle_start body WHILE LPAREN expresion . RPAREN goto_true SEMICOLON

    RPAREN          shift and go to state 138


state 129

    (32) cycle -> WHILE cycle_start LPAREN expresion RPAREN generate_gotof . body generate_goto finish_gotof SEMICOLON
    (9) body -> . LBRACE list_statements RBRACE

    LBRACE          shift and go to state 20

    body                           shift and go to state 139

state 130

    (26) list_expresion -> expresion addPrint COMMA list_expresion .

    RPAREN          reduce using rule 26 (list_expresion -> expresion addPrint COMMA list_expresion .)


state 131

    (28) list_expresion -> CTE_STRING addPrintString COMMA list_expresion .

    RPAREN          reduce using rule 28 (list_expresion -> CTE_STRING addPrintString COMMA list_expresion .)


state 132

    (76) more_params -> COMMA ID COLON . type more_params
    (7) type -> . INT
    (8) type -> . FLOAT

    INT             shift and go to state 24
    FLOAT           shift and go to state 25

    type                           shift and go to state 140

state 133

    (68) funcs -> VOID ID LPAREN list_params RPAREN LBRACE var_no_var body RBRACE . SEMICOLON

    SEMICOLON       shift and go to state 141


state 134

    (6) list_vars -> ID COLON type SEMICOLON list_vars .

    VOID            reduce using rule 6 (list_vars -> ID COLON type SEMICOLON list_vars .)
    MAIN_COURSE     reduce using rule 6 (list_vars -> ID COLON type SEMICOLON list_vars .)
    LBRACE          reduce using rule 6 (list_vars -> ID COLON type SEMICOLON list_vars .)


state 135

    (38) condition -> IF LPAREN expresion RPAREN goto_false body else_part . SEMICOLON

    SEMICOLON       shift and go to state 142


state 136

    (40) else_part -> ELSE . goto body
    (42) goto -> .

    LBRACE          reduce using rule 42 (goto -> .)

    goto                           shift and go to state 143

state 137

    (41) else_part -> empty .

    SEMICOLON       reduce using rule 41 (else_part -> empty .)


state 138

    (31) do_cycle -> DO cycle_start body WHILE LPAREN expresion RPAREN . goto_true SEMICOLON
    (37) goto_true -> .

    SEMICOLON       reduce using rule 37 (goto_true -> .)

    goto_true                      shift and go to state 144

state 139

    (32) cycle -> WHILE cycle_start LPAREN expresion RPAREN generate_gotof body . generate_goto finish_gotof SEMICOLON
    (34) generate_goto -> .

    SEMICOLON       reduce using rule 34 (generate_goto -> .)

    generate_goto                  shift and go to state 145

state 140

    (76) more_params -> COMMA ID COLON type . more_params
    (75) more_params -> . empty
    (76) more_params -> . COMMA ID COLON type more_params
    (80) empty -> .

    COMMA           shift and go to state 99
    RPAREN          reduce using rule 80 (empty -> .)

    more_params                    shift and go to state 146
    empty                          shift and go to state 98

state 141

    (68) funcs -> VOID ID LPAREN list_params RPAREN LBRACE var_no_var body RBRACE SEMICOLON .

    VOID            reduce using rule 68 (funcs -> VOID ID LPAREN list_params RPAREN LBRACE var_no_var body RBRACE SEMICOLON .)
    MAIN_COURSE     reduce using rule 68 (funcs -> VOID ID LPAREN list_params RPAREN LBRACE var_no_var body RBRACE SEMICOLON .)


state 142

    (38) condition -> IF LPAREN expresion RPAREN goto_false body else_part SEMICOLON .

    ID              reduce using rule 38 (condition -> IF LPAREN expresion RPAREN goto_false body else_part SEMICOLON .)
    IF              reduce using rule 38 (condition -> IF LPAREN expresion RPAREN goto_false body else_part SEMICOLON .)
    DO              reduce using rule 38 (condition -> IF LPAREN expresion RPAREN goto_false body else_part SEMICOLON .)
    WHILE           reduce using rule 38 (condition -> IF LPAREN expresion RPAREN goto_false body else_part SEMICOLON .)
    PRINT           reduce using rule 38 (condition -> IF LPAREN expresion RPAREN goto_false body else_part SEMICOLON .)
    RBRACE          reduce using rule 38 (condition -> IF LPAREN expresion RPAREN goto_false body else_part SEMICOLON .)


state 143

    (40) else_part -> ELSE goto . body
    (9) body -> . LBRACE list_statements RBRACE

    LBRACE          shift and go to state 20

    body                           shift and go to state 147

state 144

    (31) do_cycle -> DO cycle_start body WHILE LPAREN expresion RPAREN goto_true . SEMICOLON

    SEMICOLON       shift and go to state 148


state 145

    (32) cycle -> WHILE cycle_start LPAREN expresion RPAREN generate_gotof body generate_goto . finish_gotof SEMICOLON
    (35) finish_gotof -> .

    SEMICOLON       reduce using rule 35 (finish_gotof -> .)

    finish_gotof                   shift and go to state 149

state 146

    (76) more_params -> COMMA ID COLON type more_params .

    RPAREN          reduce using rule 76 (more_params -> COMMA ID COLON type more_params .)


state 147

    (40) else_part -> ELSE goto body .

    SEMICOLON       reduce using rule 40 (else_part -> ELSE goto body .)


state 148

    (31) do_cycle -> DO cycle_start body WHILE LPAREN expresion RPAREN goto_true SEMICOLON .

    ID              reduce using rule 31 (do_cycle -> DO cycle_start body WHILE LPAREN expresion RPAREN goto_true SEMICOLON .)
    IF              reduce using rule 31 (do_cycle -> DO cycle_start body WHILE LPAREN expresion RPAREN goto_true SEMICOLON .)
    DO              reduce using rule 31 (do_cycle -> DO cycle_start body WHILE LPAREN expresion RPAREN goto_true SEMICOLON .)
    WHILE           reduce using rule 31 (do_cycle -> DO cycle_start body WHILE LPAREN expresion RPAREN goto_true SEMICOLON .)
    PRINT           reduce using rule 31 (do_cycle -> DO cycle_start body WHILE LPAREN expresion RPAREN goto_true SEMICOLON .)
    RBRACE          reduce using rule 31 (do_cycle -> DO cycle_start body WHILE LPAREN expresion RPAREN goto_true SEMICOLON .)


state 149

    (32) cycle -> WHILE cycle_start LPAREN expresion RPAREN generate_gotof body generate_goto finish_gotof . SEMICOLON

    SEMICOLON       shift and go to state 150


state 150

    (32) cycle -> WHILE cycle_start LPAREN expresion RPAREN generate_gotof body generate_goto finish_gotof SEMICOLON .

    ID              reduce using rule 32 (cycle -> WHILE cycle_start LPAREN expresion RPAREN generate_gotof body generate_goto finish_gotof SEMICOLON .)
    IF              reduce using rule 32 (cycle -> WHILE cycle_start LPAREN expresion RPAREN generate_gotof body generate_goto finish_gotof SEMICOLON .)
    DO              reduce using rule 32 (cycle -> WHILE cycle_start LPAREN expresion RPAREN generate_gotof body generate_goto finish_gotof SEMICOLON .)
    WHILE           reduce using rule 32 (cycle -> WHILE cycle_start LPAREN expresion RPAREN generate_gotof body generate_goto finish_gotof SEMICOLON .)
    PRINT           reduce using rule 32 (cycle -> WHILE cycle_start LPAREN expresion RPAREN generate_gotof body generate_goto finish_gotof SEMICOLON .)
    RBRACE          reduce using rule 32 (cycle -> WHILE cycle_start LPAREN expresion RPAREN generate_gotof body generate_goto finish_gotof SEMICOLON .)

