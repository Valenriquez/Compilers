
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDEleftLTGTNECOLON COMMA CTE_FLOAT CTE_INT CTE_STRING DIVIDE DO ELSE ENDING EQUALS FLOAT GT ID IF INT LBRACE LPAREN LT MAIN_COURSE MINUS MY_VARS NE PLUS PRINT PROGRAM RBRACE RPAREN SEMICOLON TIMES VOID WHILEprogram : PROGRAM ID SEMICOLON a_vars a_funcs MAIN_COURSE body ENDINGa_vars : empty\n              | varsvars : MY_VARS ID COLON type SEMICOLON list_varslist_vars : empty\n                 | ID COLON type SEMICOLON list_varstype : INT\n            | FLOATbody : LBRACE list_statements RBRACElist_statements : statement body_rep\n                       | empty\n                       | statementbody_rep : statement body_rep\n                       | statementstatement : assign\n                 | condition\n                 | do_cycle\n                 | cycle\n                 | f_call\n                 | print_statementprint_statement : PRINT LPAREN list_expresion RPAREN SEMICOLONassign : ID add_operand EQUALS add_operador expresion SEMICOLONadd_operand : add_operador : list_expresion : expresion addPrint\n                    | expresion addPrint COMMA list_expresion\n                    | CTE_STRING addPrintString\n                    | CTE_STRING addPrintString COMMA list_expresionaddPrint : addPrintString : do_cycle : DO cycle_start body WHILE LPAREN expresion RPAREN goto_true SEMICOLONcycle : WHILE cycle_start LPAREN expresion RPAREN generate_gotof body generate_goto finish_gotof SEMICOLONgenerate_gotof :generate_goto :finish_gotof :cycle_start : goto_true : condition : IF LPAREN expresion RPAREN goto_false body else_part SEMICOLONgoto_false : else_part : ELSE goto body\n                 | emptygoto : expresion : exp comparar_exp exp\n                | expcomparar_exp : LT\n                    | GT\n                    | NEexp : termino add_termino \n           | termino add_termino next_terminoadd_termino : next_termino : sum_rest exp sum_rest : PLUS\n                | MINUStermino : factor add_factor next_factor\n               | factor add_factornext_factor : mult_div terminomult_div : TIMES\n                | DIVIDEfactor : LPAREN expresion RPAREN\n              | id_cteadd_factor : id_cte : ID push_var\n              | cte push_constpush_const : push_var : cte : CTE_INT\n           | CTE_FLOATfuncs : VOID ID LPAREN list_params RPAREN LBRACE var_no_var body RBRACE SEMICOLONa_funcs : empty\n               | funcs b_funcsb_funcs : funcs b_funcs\n                | funcslist_params : empty\n                   | ID COLON type more_paramsmore_params : empty\n                   | COMMA ID COLON type more_paramsvar_no_var : empty\n                  | varsf_call : ID LPAREN RPAREN SEMICOLONempty :'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,26,],[0,-1,]),'ID':([2,8,12,20,22,28,30,31,32,33,34,35,44,46,50,53,60,62,73,80,81,84,85,86,87,99,109,110,111,113,114,115,116,118,119,120,123,124,142,148,150,],[3,13,17,36,41,36,-15,-16,-17,-18,-19,-20,56,36,68,68,-24,68,68,68,-79,68,-45,-46,-47,121,68,-52,-53,68,-57,-58,68,-21,68,68,56,-22,-38,-31,-32,]),'SEMICOLON':([3,23,24,25,45,61,64,65,66,67,68,69,70,71,88,89,90,91,94,103,104,105,107,108,112,125,126,127,133,135,137,138,139,144,145,147,149,],[4,44,-7,-8,-9,81,-44,-50,-61,-60,-65,-64,-66,-67,-48,-55,-62,-63,118,123,124,-59,-43,-49,-54,-80,-51,-56,141,142,-41,-37,-34,148,-35,-40,150,]),'VOID':([4,5,6,7,11,15,44,57,58,123,134,141,],[-80,12,-2,-3,12,12,-80,-4,-5,-80,-6,-68,]),'MAIN_COURSE':([4,5,6,7,9,10,15,16,21,44,57,58,123,134,141,],[-80,-80,-2,-3,14,-69,-72,-70,-71,-80,-4,-5,-80,-6,-68,]),'MY_VARS':([4,78,],[8,8,]),'COLON':([13,41,56,121,],[18,54,79,132,]),'LBRACE':([14,38,44,51,55,57,58,78,83,100,101,102,106,117,123,129,134,136,143,],[20,-36,-80,20,78,-4,-5,-80,-39,20,-77,-78,20,-33,-80,20,-6,-42,20,]),'LPAREN':([17,36,37,39,40,50,52,53,60,62,73,80,84,85,86,87,92,109,110,111,113,114,115,116,119,120,],[22,49,50,-36,53,62,73,62,-24,62,62,62,62,-45,-46,-47,116,62,-52,-53,62,-57,-58,62,62,62,]),'INT':([18,54,79,132,],[24,24,24,24,]),'FLOAT':([18,54,79,132,],[25,25,25,25,]),'ENDING':([19,45,],[26,-9,]),'RBRACE':([20,27,28,29,30,31,32,33,34,35,45,46,47,59,81,118,122,124,142,148,150,],[-80,45,-12,-11,-15,-16,-17,-18,-19,-20,-9,-14,-10,-13,-79,-21,133,-22,-38,-31,-32,]),'IF':([20,28,30,31,32,33,34,35,46,81,118,124,142,148,150,],[37,37,-15,-16,-17,-18,-19,-20,37,-79,-21,-22,-38,-31,-32,]),'DO':([20,28,30,31,32,33,34,35,46,81,118,124,142,148,150,],[38,38,-15,-16,-17,-18,-19,-20,38,-79,-21,-22,-38,-31,-32,]),'WHILE':([20,28,30,31,32,33,34,35,45,46,72,81,118,124,142,148,150,],[39,39,-15,-16,-17,-18,-19,-20,-9,39,92,-79,-21,-22,-38,-31,-32,]),'PRINT':([20,28,30,31,32,33,34,35,46,81,118,124,142,148,150,],[40,40,-15,-16,-17,-18,-19,-20,40,-79,-21,-22,-38,-31,-32,]),'RPAREN':([22,24,25,42,43,49,63,64,65,66,67,68,69,70,71,74,75,76,77,82,88,89,90,91,93,95,96,97,98,105,107,108,112,126,127,128,130,131,140,146,],[-80,-7,-8,55,-73,61,83,-44,-50,-61,-60,-65,-64,-66,-67,94,-29,-30,-80,105,-48,-55,-62,-63,117,-25,-27,-74,-75,-59,-43,-49,-54,-51,-56,138,-26,-28,-80,-76,]),'COMMA':([24,25,64,65,66,67,68,69,70,71,75,76,77,88,89,90,91,95,96,105,107,108,112,126,127,140,],[-7,-8,-44,-50,-61,-60,-65,-64,-66,-67,-29,-30,99,-48,-55,-62,-63,119,120,-59,-43,-49,-54,-51,-56,99,]),'EQUALS':([36,48,],[-23,60,]),'ELSE':([45,125,],[-9,136,]),'CTE_INT':([50,53,60,62,73,80,84,85,86,87,109,110,111,113,114,115,116,119,120,],[70,70,-24,70,70,70,70,-45,-46,-47,70,-52,-53,70,-57,-58,70,70,70,]),'CTE_FLOAT':([50,53,60,62,73,80,84,85,86,87,109,110,111,113,114,115,116,119,120,],[71,71,-24,71,71,71,71,-45,-46,-47,71,-52,-53,71,-57,-58,71,71,71,]),'CTE_STRING':([53,119,120,],[76,76,76,]),'LT':([64,65,66,67,68,69,70,71,88,89,90,91,105,108,112,126,127,],[85,-50,-61,-60,-65,-64,-66,-67,-48,-55,-62,-63,-59,-49,-54,-51,-56,]),'GT':([64,65,66,67,68,69,70,71,88,89,90,91,105,108,112,126,127,],[86,-50,-61,-60,-65,-64,-66,-67,-48,-55,-62,-63,-59,-49,-54,-51,-56,]),'NE':([64,65,66,67,68,69,70,71,88,89,90,91,105,108,112,126,127,],[87,-50,-61,-60,-65,-64,-66,-67,-48,-55,-62,-63,-59,-49,-54,-51,-56,]),'PLUS':([65,66,67,68,69,70,71,88,89,90,91,105,112,127,],[-50,-61,-60,-65,-64,-66,-67,110,-55,-62,-63,-59,-54,-56,]),'MINUS':([65,66,67,68,69,70,71,88,89,90,91,105,112,127,],[-50,-61,-60,-65,-64,-66,-67,111,-55,-62,-63,-59,-54,-56,]),'TIMES':([66,67,68,69,70,71,89,90,91,105,],[-61,-60,-65,-64,-66,-67,114,-62,-63,-59,]),'DIVIDE':([66,67,68,69,70,71,89,90,91,105,],[-61,-60,-65,-64,-66,-67,115,-62,-63,-59,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'a_vars':([4,],[5,]),'empty':([4,5,20,22,44,77,78,123,125,140,],[6,10,29,43,58,98,101,58,137,98,]),'vars':([4,78,],[7,102,]),'a_funcs':([5,],[9,]),'funcs':([5,11,15,],[11,15,15,]),'b_funcs':([11,15,],[16,21,]),'body':([14,51,100,106,129,143,],[19,72,122,125,139,147,]),'type':([18,54,79,132,],[23,77,103,140,]),'list_statements':([20,],[27,]),'statement':([20,28,46,],[28,46,46,]),'assign':([20,28,46,],[30,30,30,]),'condition':([20,28,46,],[31,31,31,]),'do_cycle':([20,28,46,],[32,32,32,]),'cycle':([20,28,46,],[33,33,33,]),'f_call':([20,28,46,],[34,34,34,]),'print_statement':([20,28,46,],[35,35,35,]),'list_params':([22,],[42,]),'body_rep':([28,46,],[47,59,]),'add_operand':([36,],[48,]),'cycle_start':([38,39,],[51,52,]),'list_vars':([44,123,],[57,134,]),'expresion':([50,53,62,73,80,116,119,120,],[63,75,82,93,104,128,75,75,]),'exp':([50,53,62,73,80,84,109,116,119,120,],[64,64,64,64,64,107,126,64,64,64,]),'termino':([50,53,62,73,80,84,109,113,116,119,120,],[65,65,65,65,65,65,65,127,65,65,65,]),'factor':([50,53,62,73,80,84,109,113,116,119,120,],[66,66,66,66,66,66,66,66,66,66,66,]),'id_cte':([50,53,62,73,80,84,109,113,116,119,120,],[67,67,67,67,67,67,67,67,67,67,67,]),'cte':([50,53,62,73,80,84,109,113,116,119,120,],[69,69,69,69,69,69,69,69,69,69,69,]),'list_expresion':([53,119,120,],[74,130,131,]),'add_operador':([60,],[80,]),'comparar_exp':([64,],[84,]),'add_termino':([65,],[88,]),'add_factor':([66,],[89,]),'push_var':([68,],[90,]),'push_const':([69,],[91,]),'addPrint':([75,],[95,]),'addPrintString':([76,],[96,]),'more_params':([77,140,],[97,146,]),'var_no_var':([78,],[100,]),'goto_false':([83,],[106,]),'next_termino':([88,],[108,]),'sum_rest':([88,],[109,]),'next_factor':([89,],[112,]),'mult_div':([89,],[113,]),'generate_gotof':([117,],[129,]),'else_part':([125,],[135,]),'goto':([136,],[143,]),'goto_true':([138,],[144,]),'generate_goto':([139,],[145,]),'finish_gotof':([145,],[149,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMICOLON a_vars a_funcs MAIN_COURSE body ENDING','program',8,'p_program','mi_parser.py',28),
  ('a_vars -> empty','a_vars',1,'p_a_vars','mi_parser.py',35),
  ('a_vars -> vars','a_vars',1,'p_a_vars','mi_parser.py',36),
  ('vars -> MY_VARS ID COLON type SEMICOLON list_vars','vars',6,'p_vars','mi_parser.py',52),
  ('list_vars -> empty','list_vars',1,'p_list_vars','mi_parser.py',64),
  ('list_vars -> ID COLON type SEMICOLON list_vars','list_vars',5,'p_list_vars','mi_parser.py',65),
  ('type -> INT','type',1,'p_type','mi_parser.py',74),
  ('type -> FLOAT','type',1,'p_type','mi_parser.py',75),
  ('body -> LBRACE list_statements RBRACE','body',3,'p_body','mi_parser.py',82),
  ('list_statements -> statement body_rep','list_statements',2,'p_list_statements','mi_parser.py',92),
  ('list_statements -> empty','list_statements',1,'p_list_statements','mi_parser.py',93),
  ('list_statements -> statement','list_statements',1,'p_list_statements','mi_parser.py',94),
  ('body_rep -> statement body_rep','body_rep',2,'p_body_rep','mi_parser.py',99),
  ('body_rep -> statement','body_rep',1,'p_body_rep','mi_parser.py',100),
  ('statement -> assign','statement',1,'p_statement','mi_parser.py',105),
  ('statement -> condition','statement',1,'p_statement','mi_parser.py',106),
  ('statement -> do_cycle','statement',1,'p_statement','mi_parser.py',107),
  ('statement -> cycle','statement',1,'p_statement','mi_parser.py',108),
  ('statement -> f_call','statement',1,'p_statement','mi_parser.py',109),
  ('statement -> print_statement','statement',1,'p_statement','mi_parser.py',110),
  ('print_statement -> PRINT LPAREN list_expresion RPAREN SEMICOLON','print_statement',5,'p_print_stmt','mi_parser.py',115),
  ('assign -> ID add_operand EQUALS add_operador expresion SEMICOLON','assign',6,'p_assign','mi_parser.py',123),
  ('add_operand -> <empty>','add_operand',0,'p_add_operand','mi_parser.py',128),
  ('add_operador -> <empty>','add_operador',0,'p_add_operador','mi_parser.py',132),
  ('list_expresion -> expresion addPrint','list_expresion',2,'p_list_expresion','mi_parser.py',140),
  ('list_expresion -> expresion addPrint COMMA list_expresion','list_expresion',4,'p_list_expresion','mi_parser.py',141),
  ('list_expresion -> CTE_STRING addPrintString','list_expresion',2,'p_list_expresion','mi_parser.py',142),
  ('list_expresion -> CTE_STRING addPrintString COMMA list_expresion','list_expresion',4,'p_list_expresion','mi_parser.py',143),
  ('addPrint -> <empty>','addPrint',0,'p_addPrint','mi_parser.py',148),
  ('addPrintString -> <empty>','addPrintString',0,'p_addPrintString','mi_parser.py',152),
  ('do_cycle -> DO cycle_start body WHILE LPAREN expresion RPAREN goto_true SEMICOLON','do_cycle',9,'p_do_cycle','mi_parser.py',157),
  ('cycle -> WHILE cycle_start LPAREN expresion RPAREN generate_gotof body generate_goto finish_gotof SEMICOLON','cycle',10,'p_cycle','mi_parser.py',163),
  ('generate_gotof -> <empty>','generate_gotof',0,'p_generate_gotof','mi_parser.py',167),
  ('generate_goto -> <empty>','generate_goto',0,'p_generate_goto','mi_parser.py',178),
  ('finish_gotof -> <empty>','finish_gotof',0,'p_finish_gotof','mi_parser.py',183),
  ('cycle_start -> <empty>','cycle_start',0,'p_cycle_start','mi_parser.py',190),
  ('goto_true -> <empty>','goto_true',0,'p_goto_true','mi_parser.py',196),
  ('condition -> IF LPAREN expresion RPAREN goto_false body else_part SEMICOLON','condition',8,'p_condition','mi_parser.py',201),
  ('goto_false -> <empty>','goto_false',0,'p_goto_false','mi_parser.py',206),
  ('else_part -> ELSE goto body','else_part',3,'p_else_part','mi_parser.py',211),
  ('else_part -> empty','else_part',1,'p_else_part','mi_parser.py',212),
  ('goto -> <empty>','goto',0,'p_goto','mi_parser.py',217),
  ('expresion -> exp comparar_exp exp','expresion',3,'p_expresion','mi_parser.py',222),
  ('expresion -> exp','expresion',1,'p_expresion','mi_parser.py',223),
  ('comparar_exp -> LT','comparar_exp',1,'p_comparar_exp','mi_parser.py',228),
  ('comparar_exp -> GT','comparar_exp',1,'p_comparar_exp','mi_parser.py',229),
  ('comparar_exp -> NE','comparar_exp',1,'p_comparar_exp','mi_parser.py',230),
  ('exp -> termino add_termino','exp',2,'p_exp','mi_parser.py',235),
  ('exp -> termino add_termino next_termino','exp',3,'p_exp','mi_parser.py',236),
  ('add_termino -> <empty>','add_termino',0,'p_add_termino','mi_parser.py',241),
  ('next_termino -> sum_rest exp','next_termino',2,'p_next_termino','mi_parser.py',246),
  ('sum_rest -> PLUS','sum_rest',1,'p_sum_rest','mi_parser.py',251),
  ('sum_rest -> MINUS','sum_rest',1,'p_sum_rest','mi_parser.py',252),
  ('termino -> factor add_factor next_factor','termino',3,'p_termino','mi_parser.py',265),
  ('termino -> factor add_factor','termino',2,'p_termino','mi_parser.py',266),
  ('next_factor -> mult_div termino','next_factor',2,'p_next_factor','mi_parser.py',271),
  ('mult_div -> TIMES','mult_div',1,'p_mult_div','mi_parser.py',276),
  ('mult_div -> DIVIDE','mult_div',1,'p_mult_div','mi_parser.py',277),
  ('factor -> LPAREN expresion RPAREN','factor',3,'p_factor','mi_parser.py',283),
  ('factor -> id_cte','factor',1,'p_factor','mi_parser.py',284),
  ('add_factor -> <empty>','add_factor',0,'p_add_factor','mi_parser.py',289),
  ('id_cte -> ID push_var','id_cte',2,'p_id_cte','mi_parser.py',294),
  ('id_cte -> cte push_const','id_cte',2,'p_id_cte','mi_parser.py',295),
  ('push_const -> <empty>','push_const',0,'p_push_const','mi_parser.py',300),
  ('push_var -> <empty>','push_var',0,'p_push_var','mi_parser.py',305),
  ('cte -> CTE_INT','cte',1,'p_cte','mi_parser.py',310),
  ('cte -> CTE_FLOAT','cte',1,'p_cte','mi_parser.py',311),
  ('funcs -> VOID ID LPAREN list_params RPAREN LBRACE var_no_var body RBRACE SEMICOLON','funcs',10,'p_funcs','mi_parser.py',316),
  ('a_funcs -> empty','a_funcs',1,'p_a_funcs','mi_parser.py',321),
  ('a_funcs -> funcs b_funcs','a_funcs',2,'p_a_funcs','mi_parser.py',322),
  ('b_funcs -> funcs b_funcs','b_funcs',2,'p_b_funcs','mi_parser.py',327),
  ('b_funcs -> funcs','b_funcs',1,'p_b_funcs','mi_parser.py',328),
  ('list_params -> empty','list_params',1,'p_list_params','mi_parser.py',333),
  ('list_params -> ID COLON type more_params','list_params',4,'p_list_params','mi_parser.py',334),
  ('more_params -> empty','more_params',1,'p_more_params','mi_parser.py',339),
  ('more_params -> COMMA ID COLON type more_params','more_params',5,'p_more_params','mi_parser.py',340),
  ('var_no_var -> empty','var_no_var',1,'p_var_no_var','mi_parser.py',345),
  ('var_no_var -> vars','var_no_var',1,'p_var_no_var','mi_parser.py',346),
  ('f_call -> ID LPAREN RPAREN SEMICOLON','f_call',4,'p_f_call','mi_parser.py',351),
  ('empty -> <empty>','empty',0,'p_empty','mi_parser.py',356),
]
